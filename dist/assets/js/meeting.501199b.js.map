{"version":3,"sources":["webpack:///./src/pages/meeting/meeting.js","webpack:///./src/utils/constants.js","webpack:///./src/utils/rtcClient.js","webpack:///./src/utils/signalClient.js","webpack:///./src/utils/utils.js"],"names":["__WEBPACK_IMPORTED_MODULE_0_jquery___default","appid","__WEBPACK_IMPORTED_MODULE_8__static_agora_config__","account","__WEBPACK_IMPORTED_MODULE_5__utils_utils__","getParameterByName","channel","role","rtc","__WEBPACK_IMPORTED_MODULE_6__utils_rtcClient__","signal","__WEBPACK_IMPORTED_MODULE_7__utils_signalClient__","syncStreamDisplay","streams","$containers","i","length","$container","get","id","attr","uid","split","filter","removeAttr","html","forEach","stream","Error","findSpareContainer","setRemoteStreamType","__WEBPACK_IMPORTED_MODULE_9__utils_constants__","High","Low","play","on","$chatInput","keypress","e","which","msg","currentTarget","value","val","broadcast","click","append","displayChatMessage","Promise","all","init","StreamType","Local","Remote","DualType","StreamWrapper","constructor","type","this","__WEBPACK_IMPORTED_MODULE_3__utils_constants__","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_2_events__","super","__WEBPACK_IMPORTED_MODULE_0_agora_rtc_sdk___default","a","createClient","mode","codec","videoProfile","dynamicKey","subscribeStreamEvents","channelName","publish","async","resolve","reject","client","key","getDynamicKey","join","undefined","options","streamID","audio","video","screen","localStream","createStream","setVideoProfile","addStream","enableDualStream","err","evt","__WEBPACK_IMPORTED_MODULE_1__utils__","log","getId","Date","now","subscribe","removeStream","streamObj","published","console","error","push","emit","dualType","setRemoteVideoStreamType","__WEBPACK_IMPORTED_MODULE_1_events__","__WEBPACK_IMPORTED_MODULE_2_agora_signaling_sdk___default","session","[object Object]","login","joinChannel","__WEBPACK_IMPORTED_MODULE_0__utils__","onLoginSuccess","onLoginFailed","ecode","channelJoin","onChannelJoined","onMessageChannelReceive","onChannelJoinFailed","messageChannelSend","__WEBPACK_IMPORTED_MODULE_1_toastr_build_toastr_css__","__webpack_require__","n","Logger","m","Browser","name","url","window","location","href","replace","results","RegExp","exec","decodeURIComponent"],"mappings":"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","file":"assets/js/meeting.501199b.js","sourcesContent":["import $ from 'jquery';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap';\n\nimport '../../assets/css/main.css';\nimport './meeting.css';\nimport { Browser } from '../../utils/utils'\nimport RtcClient from '../../utils/rtcClient'\nimport SignalClient from '../../utils/signalClient'\nimport { AGORA_APP_ID } from '../../../static/agora.config';\nimport { DualType } from '../../utils/constants'\n\n$(() => {\n    const appid = AGORA_APP_ID;\n    let account = Browser.getParameterByName(\"account\");\n    let channel = Browser.getParameterByName(\"channel\");\n    let role = Browser.getParameterByName(\"role\");\n    let rtc = new RtcClient(appid);\n    let signal = new SignalClient(appid);\n\n    // find spare container to place video into\n    const findSpareContainer = () => {\n        let $containers = $(`.video-container`);\n        for( let i = 0; i < $containers.length; i++) {\n            let $container = $($containers.get(i));\n            let id = $container.attr('id');\n            if(!id) {\n                return $container;\n            }\n        }\n        throw new Error(`no spare container left`);\n    }\n\n    // sync streams object with dom\n    const syncStreamDisplay = streams => {\n        //check removed streams\n        let $containers = $(`.video-container`);\n        for( let i = 0; i < $containers.length; i++) {\n            let $container = $($containers.get(i));\n            let id = $container.attr('id');\n            if(!id) {\n                continue;\n            }\n            let uid = id.split('-')[2];\n            if(streams.filter(i => `${i.uid}` === `${uid}`).length === 0) {\n                $container.removeAttr('id');\n                $container.html('');\n            }\n        }\n\n        //check newly added streams\n        streams.forEach(stream => {\n            let uid = stream.uid;\n            let id = `agora-video-${uid}`;\n            let $dom = $(`#${id}`);\n            if($dom.length === 0) {\n                //not found\n                let $container = findSpareContainer();\n                $container.attr('id', id);\n                let dualType = $container.attr(\"dual\");\n                if(dualType === \"main\") {\n                    //bigger screen uses high stream, which has higher resolution and bandwidth consumption\n                    rtc.setRemoteStreamType(stream, DualType.High);\n                } else {\n                    //small screen uses low stream, which has lower resolution and bandwidth consumption\n                    rtc.setRemoteStreamType(stream, DualType.Low);\n                }\n                stream.stream.play(id)\n            }\n        });\n    }\n\n    // append a new chat message on screen\n    const displayChatMessage = (account, msg) => {\n        $(`.chat-list`).append(`<li class=\"list-group-item\">${account} - ${msg}</li>`);\n    }\n\n    //bind stream update event\n    rtc.on('streamlist-update', streams => {\n        syncStreamDisplay(streams);\n    });\n\n    //bind chat input\n    let $chatInput = $(`#chat-input`);\n    $chatInput.keypress(e => {\n        if(e.which == 13) {\n            let msg = e.currentTarget.value;\n            $(e.currentTarget).val(\"\");\n            signal.broadcast(msg);\n        }\n    });\n    //bind send btn click event\n    $(`#send_btn`).click(() => {\n        let msg = $chatInput.val();\n        $chatInput.val(\"\");\n        signal.broadcast(msg);\n    })\n\n    //bind signal msg receive\n    signal.on(\"channel-message\", ({account, msg}) => {\n        displayChatMessage(account, msg);\n    });\n\n    //by default call btn is disabled\n    Promise.all([rtc.init(channel, role === \"broadcaster\"), signal.init(account, channel, role)]);\n    \n});\n\n\n// WEBPACK FOOTER //\n// ./src/pages/meeting/meeting.js","\nconst StreamType = {\n    Local: 0,\n    Remote: 1\n}\n\nconst DualType = {\n    High: 0,\n    Low: 1\n}\n\nexport { StreamType, DualType };\n\n\n// WEBPACK FOOTER //\n// ./src/utils/constants.js","import AgoraRTC from 'agora-rtc-sdk'\nimport {Logger} from './utils'\nimport { EventEmitter } from 'events';\nimport { StreamType, DualType } from '../utils/constants'\n\n\n// wrapper of Stream Object\nclass StreamWrapper {\n    constructor(stream, type, uid) {\n        // websdk stream object\n        this.stream = stream;\n        // type - remote or local\n        this.type = type || StreamType.Local;\n        // uid of the stream\n        this.uid = uid;\n    }\n}\n\n// wrapper of agora rtc sdk client\nclass RtcClient extends EventEmitter{\n    constructor(appid) {\n        super();\n        this.appid = appid;\n        this.rtc = AgoraRTC.createClient({ mode: 'live', codec: 'h264' });\n        this.streams = [];\n        this.uid = null;\n        this.videoProfile = \"480p_1\";\n        this.dynamicKey = null;\n\n        // this.subscribeWindowResizeEvent();\n        this.subscribeStreamEvents();\n    }\n\n    //life cycle\n    init(channelName, publish) {\n        return new Promise(async (resolve, reject) => {\n            let appid = this.appid;\n            let client = this.rtc;\n            try {\n                //dynamic key used to join channel\n                //leave it undefined/null if app certificate is not on\n                let key = await this.getDynamicKey(channelName);\n                //init sdk client with your appid\n                client.init(appid, () => {\n                    //join channel, a random uid will be given once joined\n                    client.join(key, channelName, undefined, uid => {\n                        // if you are an audience, you may not need to continue\n                        if(!publish) {\n                            // immediately resolve if audience\n                            return resolve();\n                        }\n\n                        // prepare to publish, init local stream opts\n                        let options = {\n                            streamID: uid,\n                            audio: true,\n                            video: true,\n                            screen: false\n                        };\n                        this.uid = uid;\n                        let localStream = AgoraRTC.createStream(options);\n                        // this decides the video resolution/fps\n                        // for all values go to: https://docs.agora.io/cn/2.4/product/Voice/API%20Reference/communication_web_audio?platform=Web\n                        localStream.setVideoProfile(this.videoProfile);\n                        \n                        // initialize localstream\n                        localStream.init(() => {\n                            //adding this stream into stream list and notify stream list update\n                            this.addStream(new StreamWrapper(localStream, StreamType.Local, uid))\n                            //enable dual stream mode so we have big/small streams\n                            client.enableDualStream(() => {\n                                //publish stream so that others will receive your video\n                                client.publish(localStream);\n                                resolve();\n                            }, err => {\n                                reject(err);\n                            });\n                        });\n                    }, err => {\n                        reject(err);\n                    });\n                });\n            } catch(e){\n                throw e;\n            };\n        });\n    }\n\n\n    getDynamicKey(channelName) {\n        // if dynamic not enabled\n        return Promise.resolve(undefined);\n\n        // if dynamic key enabled\n        // return $.ajax({\n        //     url: 'service url to get your dynamic key'\n        // })\n    }\n\n    //subscribe necessary RTC events\n    subscribeStreamEvents() {\n        let client = this.rtc;\n        // indicate a new user has joined the channel, you will not be able to see him unless you subscribe him.\n        client.on('stream-added', evt => {\n            let stream = evt.stream;\n            Logger.log(\"New stream added: \" + stream.getId());\n            Logger.log(\"Timestamp: \" + Date.now());\n            Logger.log(\"Subscribe \", stream);\n            client.subscribe(stream, function (err) {\n                Logger.log(\"Subscribe stream failed\", err);\n            });\n        });\n\n        // indicate a user has left current channel\n        client.on('peer-leave', evt => {\n            Logger.log(\"Peer has left: \" + evt.uid);\n            Logger.log(\"Timestamp: \" + Date.now());\n            Logger.log(evt);\n            this.removeStream(evt.uid);\n        });\n\n        // indicate a user has been subscribed, you may play the live video now\n        client.on('stream-subscribed', evt => {\n            let stream = evt.stream;\n            Logger.log(\"Got stream-subscribed event\");\n            Logger.log(\"Timestamp: \" + Date.now());\n            Logger.log(\"Subscribe remote stream successfully: \" + stream.getId());\n            Logger.log(evt);\n\n            let streamObj = new StreamWrapper(stream, StreamType.Remote, stream.getId());\n            this.addStream(streamObj);\n        });\n\n        // indicate a user's stream has been removed\n        client.on(\"stream-removed\", evt => {\n            let stream = evt.stream;\n            Logger.log(\"Stream removed: \" + evt.stream.getId());\n            Logger.log(\"Timestamp: \" + Date.now());\n            Logger.log(evt);\n\n            this.removeStream(stream.getId());\n        });\n\n        client.on('stream-published', () => {\n            this.published = true;\n            Logger.log(`stream published`);\n        });\n    }\n\n    addStream(stream) {\n        if(!stream instanceof StreamWrapper) {\n            console.error(`only type of streamWrapper can be added to list`);\n            return;\n        }\n        this.streams.push(stream);\n        this.emit('streamlist-update', this.streams);\n    }\n\n    removeStream(uid) {\n        this.streams = this.streams.filter(stream => `${uid}` !== `${stream.uid}`);\n        this.emit('streamlist-update', this.streams);\n    }\n\n    setRemoteStreamType(stream, dualType) {\n        if(!stream instanceof StreamWrapper) {\n            console.error(`only type of streamWrapper can be added to list`);\n            return;\n        }\n        let client = this.rtc;\n        client.setRemoteVideoStreamType(stream.stream, dualType);\n    }\n}\n\nexport default RtcClient;\n\n\n// WEBPACK FOOTER //\n// ./src/utils/rtcClient.js","import { Logger } from './utils'\nimport { EventEmitter } from 'events';\nimport Signal from 'agora-signaling-sdk'\n\n// wrapper of agora signaling sdk client\nclass SignalClient extends EventEmitter {\n    constructor(appid) {\n        super();\n        this.signal = Signal(appid);\n        this.session = null;\n        this.channel = null;\n    }\n\n    async init(account, channelName) {\n        try {\n            await this.login(account);\n            await this.joinChannel(channelName);\n            Logger.log(`signal initialized`);\n        } catch(e) {\n            throw(e);\n        }\n    }\n\n    login(account) {\n        return new Promise((resolve, reject) => {\n            // login signaling with given account, token needs to be provided if app certificate is on\n            let session = this.signal.login(account, '_no_need_token');\n            session.onLoginSuccess = () => {\n                resolve();\n            };\n            session.onLoginFailed = ecode => {\n                reject(`login failed: ${ecode}`);\n            };\n            this.session = session;\n        });\n    }\n\n    joinChannel(channelName) {\n        return new Promise((resolve, reject) => {\n            // join a channel with given name, users in the same channel can communicate with each other with channel functions\n            let channel = this.session.channelJoin(channelName);\n            channel.onChannelJoined = () => {\n                channel.onMessageChannelReceive = (account, uid, msg) => {\n                    // received channle message\n                    this.emit(\"channel-message\", {account, msg});\n                };\n                resolve();\n            };\n            channel.onChannelJoinFailed = ecode => {\n                reject(`join channel ${channelName} failed: ${ecode}`);\n            };\n            this.channel = channel;\n        });\n    }\n\n    broadcast(msg) {\n        // broadcast msgs to users in current channel\n        this.channel.messageChannelSend(msg);\n    }\n}\n\nexport default SignalClient;\n\n\n// WEBPACK FOOTER //\n// ./src/utils/signalClient.js","/*\n * utils file\n */\nimport toastr from 'toastr'\nimport 'toastr/build/toastr.css'\n\n/*\n * Logger\n */\nclass Logger{\n}\n\nLogger.log = m => {\n    console.log(m)\n}\n\n\n/*\n * Toast\n */\nclass Message{\n    static show(m) {\n        toastr.success(m)\n    }\n}\n\n\n/*\n * Browser Utils\n */\nclass Browser{}\n\nBrowser.getParameterByName = (name, url) => {\n    if (!url) url = window.location.href;\n    name = name.replace(/[[\\]]/g, \"\\\\$&\");\n    var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n}\n\nexport {Logger, Message, Browser}\n\n\n// WEBPACK FOOTER //\n// ./src/utils/utils.js"],"sourceRoot":""}